Building from minijava_programs/Accumulator.java
Call:   Start
  Call:   MainClass
    Consumed token: <"class" at line 5 column 1>
    Consumed token: <<ID>: "Accumulator" at line 5 column 7>
    Consumed token: <"{" at line 6 column 1>
    Consumed token: <"public" at line 7 column 5>
    Consumed token: <"static" at line 7 column 12>
    Consumed token: <"void" at line 7 column 19>
    Consumed token: <<ID>: "main" at line 7 column 24>
    Consumed token: <"(" at line 7 column 28>
    Consumed token: <<ID>: "String" at line 7 column 29>
    Consumed token: <"[" at line 7 column 35>
    Consumed token: <"]" at line 7 column 36>
    Consumed token: <<ID>: "a" at line 7 column 38>
    Consumed token: <")" at line 7 column 39>
    Consumed token: <"{" at line 7 column 40>
    Call:   Statement
      Consumed token: <"System.out.println" at line 8 column 9>
      Consumed token: <"(" at line 8 column 27>
      Call:   Expression
        Call:   AndOperand
          Call:   LessOperand
            Call:   Term
              Call:   Factor
                Call:   Primary
                  Consumed token: <"new" at line 8 column 28>
                  Consumed token: <<ID>: "Sum" at line 8 column 32>
                  Consumed token: <"(" at line 8 column 35>
                  Consumed token: <")" at line 8 column 36>
                Return: Primary
                Call:   Sufix
                  Consumed token: <"." at line 8 column 37>
                  Consumed token: <<ID>: "sum1to" at line 8 column 38>
                  Consumed token: <"(" at line 8 column 44>
                  Call:   ExpList
                    Call:   Expression
                      Call:   AndOperand
                        Call:   LessOperand
                          Call:   Term
                            Call:   Factor
                              Call:   Primary
                                Consumed token: <<INT>: "100" at line 8 column 45>
                              Return: Primary
                            Return: Factor
                          Return: Term
                        Return: LessOperand
                      Return: AndOperand
                    Return: Expression
                  Return: ExpList
                  Consumed token: <")" at line 8 column 48>
                Return: Sufix
              Return: Factor
            Return: Term
          Return: LessOperand
        Return: AndOperand
      Return: Expression
      Consumed token: <")" at line 8 column 49>
      Consumed token: <";" at line 8 column 50>
    Return: Statement
    Consumed token: <"}" at line 9 column 5>
    Consumed token: <"}" at line 10 column 1>
  Return: MainClass
  Call:   ClassDecl
    Consumed token: <"class" at line 12 column 1>
    Consumed token: <<ID>: "Sum" at line 12 column 7>
    Consumed token: <"{" at line 12 column 11>
    Call:   VarDecl
      Call:   Type
        Consumed token: <<ID>: "Acc" at line 13 column 5>
      Return: Type
      Consumed token: <<ID>: "a" at line 13 column 9>
      Consumed token: <";" at line 13 column 10>
    Return: VarDecl
    Call:   MethodDecl
      Consumed token: <"public" at line 15 column 5>
      Call:   Type
        Consumed token: <"int" at line 15 column 12>
      Return: Type
      Consumed token: <<ID>: "sum1to" at line 15 column 16>
      Consumed token: <"(" at line 15 column 22>
      Call:   FormalList
        Call:   Type
          Consumed token: <"int" at line 15 column 23>
        Return: Type
        Consumed token: <<ID>: "n" at line 15 column 27>
      Return: FormalList
      Consumed token: <")" at line 15 column 28>
      Consumed token: <"{" at line 15 column 30>
      Call:   VarDecl
        Call:   Type
          Consumed token: <"int" at line 16 column 9>
        Return: Type
        Consumed token: <<ID>: "i" at line 16 column 13>
        Consumed token: <";" at line 16 column 14>
      Return: VarDecl
      Call:   VarDecl
        Call:   Type
          Consumed token: <"int" at line 17 column 9>
        Return: Type
        Consumed token: <<ID>: "t" at line 17 column 13>
        Consumed token: <";" at line 17 column 14>
      Return: VarDecl
      Call:   Statement
        Consumed token: <<ID>: "i" at line 18 column 9>
        Consumed token: <"=" at line 18 column 11>
        Call:   Expression
          Call:   AndOperand
            Call:   LessOperand
              Call:   Term
                Call:   Factor
                  Call:   Primary
                    Consumed token: <<INT>: "1" at line 18 column 13>
                  Return: Primary
                Return: Factor
              Return: Term
            Return: LessOperand
          Return: AndOperand
        Return: Expression
        Consumed token: <";" at line 18 column 14>
      Return: Statement
      Call:   Statement
        Consumed token: <<ID>: "a" at line 19 column 9>
        Consumed token: <"=" at line 19 column 11>
        Call:   Expression
          Call:   AndOperand
            Call:   LessOperand
              Call:   Term
                Call:   Factor
                  Call:   Primary
                    Consumed token: <"new" at line 19 column 13>
                    Consumed token: <<ID>: "Acc" at line 19 column 17>
                    Consumed token: <"(" at line 19 column 20>
                    Consumed token: <")" at line 19 column 21>
                  Return: Primary
                Return: Factor
              Return: Term
            Return: LessOperand
          Return: AndOperand
        Return: Expression
        Consumed token: <";" at line 19 column 22>
      Return: Statement
      Call:   Statement
        Consumed token: <<ID>: "t" at line 20 column 9>
        Consumed token: <"=" at line 20 column 11>
        Call:   Expression
          Call:   AndOperand
            Call:   LessOperand
              Call:   Term
                Call:   Factor
                  Call:   Primary
                    Consumed token: <<ID>: "a" at line 20 column 13>
                  Return: Primary
                  Call:   Sufix
                    Consumed token: <"." at line 20 column 14>
                    Consumed token: <<ID>: "init" at line 20 column 15>
                    Consumed token: <"(" at line 20 column 19>
                    Call:   ExpList
                    Return: ExpList
                    Consumed token: <")" at line 20 column 20>
                  Return: Sufix
                Return: Factor
              Return: Term
            Return: LessOperand
          Return: AndOperand
        Return: Expression
        Consumed token: <";" at line 20 column 21>
      Return: Statement
      Call:   Statement
        Consumed token: <"while" at line 21 column 9>
        Consumed token: <"(" at line 21 column 14>
        Call:   Expression
          Call:   AndOperand
            Call:   LessOperand
              Call:   Term
                Call:   Factor
                  Call:   Primary
                    Consumed token: <<ID>: "i" at line 21 column 15>
                  Return: Primary
                Return: Factor
              Return: Term
            Return: LessOperand
            Consumed token: <"<" at line 21 column 17>
            Call:   LessOperand
              Call:   Term
                Call:   Factor
                  Call:   Primary
                    Consumed token: <<ID>: "n" at line 21 column 19>
                  Return: Primary
                Return: Factor
              Return: Term
              Consumed token: <"+" at line 21 column 21>
              Call:   Term
                Call:   Factor
                  Call:   Primary
                    Consumed token: <<INT>: "1" at line 21 column 23>
                  Return: Primary
                Return: Factor
              Return: Term
            Return: LessOperand
          Return: AndOperand
        Return: Expression
        Consumed token: <")" at line 21 column 24>
        Call:   Statement
          Consumed token: <"{" at line 21 column 26>
          Call:   Statement
            Consumed token: <<ID>: "t" at line 22 column 13>
            Consumed token: <"=" at line 22 column 15>
            Call:   Expression
              Call:   AndOperand
                Call:   LessOperand
                  Call:   Term
                    Call:   Factor
                      Call:   Primary
                        Consumed token: <<ID>: "a" at line 22 column 17>
                      Return: Primary
                      Call:   Sufix
                        Consumed token: <"." at line 22 column 18>
                        Consumed token: <<ID>: "add" at line 22 column 19>
                        Consumed token: <"(" at line 22 column 22>
                        Call:   ExpList
                          Call:   Expression
                            Call:   AndOperand
                              Call:   LessOperand
                                Call:   Term
                                  Call:   Factor
                                    Call:   Primary
                                      Consumed token: <<ID>: "i" at line 22 column 23>
                                    Return: Primary
                                  Return: Factor
                                Return: Term
                              Return: LessOperand
                            Return: AndOperand
                          Return: Expression
                        Return: ExpList
                        Consumed token: <")" at line 22 column 24>
                      Return: Sufix
                    Return: Factor
                  Return: Term
                Return: LessOperand
              Return: AndOperand
            Return: Expression
            Consumed token: <";" at line 22 column 25>
          Return: Statement
          Call:   Statement
            Consumed token: <<ID>: "i" at line 23 column 13>
            Consumed token: <"=" at line 23 column 15>
            Call:   Expression
              Call:   AndOperand
                Call:   LessOperand
                  Call:   Term
                    Call:   Factor
                      Call:   Primary
                        Consumed token: <<ID>: "i" at line 23 column 17>
                      Return: Primary
                    Return: Factor
                  Return: Term
                  Consumed token: <"+" at line 23 column 19>
                  Call:   Term
                    Call:   Factor
                      Call:   Primary
                        Consumed token: <<INT>: "1" at line 23 column 21>
                      Return: Primary
                    Return: Factor
                  Return: Term
                Return: LessOperand
              Return: AndOperand
            Return: Expression
            Consumed token: <";" at line 23 column 22>
          Return: Statement
          Consumed token: <"}" at line 24 column 9>
        Return: Statement
      Return: Statement
      Consumed token: <"return" at line 25 column 9>
      Call:   Expression
        Call:   AndOperand
          Call:   LessOperand
            Call:   Term
              Call:   Factor
                Call:   Primary
                  Consumed token: <<ID>: "a" at line 25 column 16>
                Return: Primary
                Call:   Sufix
                  Consumed token: <"." at line 25 column 17>
                  Consumed token: <<ID>: "sum" at line 25 column 18>
                  Consumed token: <"(" at line 25 column 21>
                  Call:   ExpList
                  Return: ExpList
                  Consumed token: <")" at line 25 column 22>
                Return: Sufix
              Return: Factor
            Return: Term
          Return: LessOperand
        Return: AndOperand
      Return: Expression
      Consumed token: <";" at line 25 column 23>
    Return: MethodDecl
    Consumed token: <"}" at line 26 column 5>
  Return: ClassDecl
Added class Sum
Return: Start

Building abstract tree...
Program(
MainClass(Identifier(Accumulator), Identifier(a), Print(Call(NewObject(Sum), Identifier(sum1to), (IntegerLiteral(100)))))
ClassDeclList(
ClassDeclSimple(Identifier(Sum), (VarDecl(IdentifierType(Acc), Identifier(a))),
(
MethodDecl(IntegerType(), Identifier(sum1to), (Formal(IntegerType(), Identifier(n))), (
VarDecl(IntegerType(), Identifier(i)), VarDecl(IntegerType(), Identifier(t))), (
Assign(Identifier(i), IntegerLiteral(1)), 
Assign(Identifier(a), NewObject(Acc)), 
Assign(Identifier(t), Call(IdentifierExp(a), Identifier(init), ())), 
While(LessThan(IdentifierExp(i), Plus(IdentifierExp(n), IntegerLiteral(1))),
Block((
Assign(Identifier(t), Call(IdentifierExp(a), Identifier(add), (IdentifierExp(i)))),
Assign(Identifier(i), Plus(IdentifierExp(i), IntegerLiteral(1))))))), 
Call(IdentifierExp(a), Identifier(sum), ()))
))
))
Searching for sum1to(int)
Testing parameters: (int): YES
